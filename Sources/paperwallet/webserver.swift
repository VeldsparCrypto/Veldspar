//    MIT License
//
//    Copyright (c) 2018 Veldspar Team
//
//    Permission is hereby granted, free of charge, to any person obtaining a copy
//    of this software and associated documentation files (the "Software"), to deal
//    in the Software without restriction, including without limitation the rights
//    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//    copies of the Software, and to permit persons to whom the Software is
//    furnished to do so, subject to the following conditions:
//
//    The above copyright notice and this permission notice shall be included in all
//    copies or substantial portions of the Software.
//
//    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//    SOFTWARE.

import Foundation
import VeldsparCore
import Swifter

class RPCHandler {
    
    func request(_ request: HttpRequest) -> HttpResponse {
        
        var queryParamsDictionary: [String:String] = [:]
        for o in request.queryParams {
            queryParamsDictionary[o.0] = o.1
        }
        
        var qs = ""
        for k in queryParamsDictionary.keys.sorted() {
            qs += "\(k)=\(queryParamsDictionary[k]!)"
        }
        
        
        var r = """
<h1 style="color: #5e9ca0;">Veldspar paper wallet generator:</h1>
<h2 style="color: #2e6c80;">Below are unique details which have not been saved or logged anywhere.</h2>
<p><span style="color: #ff0000;">Please ensure you make a note of these details as they are not re-creatable.</span></p>
<table>
<tbody>
<tr>
<td><strong>Address:</strong></td>
<td>$ADDR$</td>
</tr>
<tr>
<td><strong>Seed:</strong></td>
<td>$SEED$</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Generated by $APP$ at $TIMESTAMP$</p>
<p>&nbsp;</p>
"""
        
        r = r.replacingOccurrences(of: "$APP$", with: "\(Config.CurrencyName) Papaer Wallet Generator")
        r = r.replacingOccurrences(of: "$TIMESTAMP$", with: "\(Date())")
        
        let uuid = UUID().uuidString.lowercased() + "-" + UUID().uuidString.lowercased()
        
        let seed = Data(bytes:uuid.bytes.sha512()).prefix(32).bytes
        let k = Keys(seed)
        r = r.replacingOccurrences(of: "$ADDR$", with: "\(k.address())")
        r = r.replacingOccurrences(of: "$SEED$", with: "\(uuid)")
        
        return .ok(.html(r))
        
    }
    
}

class RPCServer {
    
    static var this = RPCServer()
    var server: HttpServer = HttpServer()
    
    class func start() {
        
        this.server[""] = { request in
            return RPCHandler().request(request)
        }
        this.server["*"] = { request in
            return RPCHandler().request(request)
        }
        this.server["*/*"] = { request in
            return RPCHandler().request(request)
        }
        this.server["*/*/*"] = { request in
            return RPCHandler().request(request)
        }
        
        try? this.server.start(in_port_t(port), forceIPv4: true, priority: .default)
        
    }
    
}


